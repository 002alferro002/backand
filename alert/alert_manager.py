import asyncio
from typing import Dict, List, Optional, Set
from datetime import datetime, timezone
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_utils import CoreUtils
from cryptoscan.backand.core.core_exceptions import AlertException
from cryptoscan.backand.alert.alert_types import AlertType, AlertData, AlertStatus
from cryptoscan.backand.alert.alert_validators import AlertValidators
from cryptoscan.backand.alert.alert_imbalance import ImbalanceAnalyzer
from cryptoscan.backand.settings import get_setting

logger = get_logger(__name__)


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, db_queries, telegram_bot=None, connection_manager=None, time_manager=None):
        self.db_queries = db_queries
        self.telegram_bot = telegram_bot
        self.connection_manager = connection_manager
        self.time_manager = time_manager

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.settings = {
            'volume_alerts_enabled': get_setting('VOLUME_ALERTS_ENABLED', True),
            'consecutive_alerts_enabled': get_setting('CONSECUTIVE_ALERTS_ENABLED', True),
            'priority_alerts_enabled': get_setting('PRIORITY_ALERTS_ENABLED', True),
            'analysis_hours': get_setting('ANALYSIS_HOURS', 1),
            'offset_minutes': get_setting('OFFSET_MINUTES', 0),
            'volume_multiplier': get_setting('VOLUME_MULTIPLIER', 2.0),
            'min_volume_usdt': get_setting('MIN_VOLUME_USDT', 1000),
            'consecutive_long_count': get_setting('CONSECUTIVE_LONG_COUNT', 5),
            'alert_grouping_minutes': get_setting('ALERT_GROUPING_MINUTES', 5),
            'data_retention_hours': get_setting('DATA_RETENTION_HOURS', 2),
            'update_interval_seconds': get_setting('UPDATE_INTERVAL_SECONDS', 1),
            'notification_enabled': get_setting('NOTIFICATION_ENABLED', True),
            'volume_type': get_setting('VOLUME_TYPE', 'long'),
            'orderbook_enabled': get_setting('ORDERBOOK_ENABLED', False),
            'orderbook_snapshot_on_alert': get_setting('ORDERBOOK_SNAPSHOT_ON_ALERT', False),
            'imbalance_enabled': get_setting('IMBALANCE_ENABLED', True),
            'fair_value_gap_enabled': get_setting('FAIR_VALUE_GAP_ENABLED', True),
            'order_block_enabled': get_setting('ORDER_BLOCK_ENABLED', True),
            'breaker_block_enabled': get_setting('BREAKER_BLOCK_ENABLED', True),
            'pairs_check_interval_minutes': get_setting('PAIRS_CHECK_INTERVAL_MINUTES', 30)
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.validators = AlertValidators()
        self.imbalance_analyzer = ImbalanceAnalyzer()

        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ (timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö UTC)
        self.alert_cooldowns = {}  # symbol -> last alert timestamp_ms

        logger.info(f"AlertManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏ UTC: {self.time_manager is not None}")

    def _get_current_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π UTC timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.time_manager:
            timestamp = self.time_manager.get_utc_timestamp_ms()
            logger.debug(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ UTC –≤—Ä–µ–º—è: {timestamp}")
            return timestamp
        else:
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
            timestamp = int(datetime.now(timezone.utc).timestamp() * 1000)
            logger.debug(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è (fallback): {timestamp}")
            return timestamp

    async def process_kline_data(self, symbol: str, kline_data: Dict) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
            if self.time_manager and hasattr(self.time_manager, 'is_candle_closed'):
                is_closed = self.time_manager.is_candle_closed(kline_data)
                logger.debug(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {symbol} —á–µ—Ä–µ–∑ time_manager: {is_closed}")
            else:
                is_closed = kline_data.get('confirm', False)
                logger.debug(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {symbol} —á–µ—Ä–µ–∑ confirm: {is_closed}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
            if is_closed:
                logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ {symbol}")
                alerts = await self._process_closed_candle(symbol, kline_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
            for alert in alerts:
                await self._send_alert(alert)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

        return alerts

    async def _process_closed_candle(self, symbol: str, kline_data: Dict) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É
            if self.settings['volume_alerts_enabled']:
                volume_alert = await self._check_volume_alert(symbol, kline_data)
                if volume_alert:
                    alerts.append(volume_alert)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ LONG —Å–≤–µ—á–∏
            if self.settings['consecutive_alerts_enabled']:
                consecutive_alert = await self._check_consecutive_long_alert(symbol, kline_data)
                if consecutive_alert:
                    alerts.append(consecutive_alert)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if self.settings['priority_alerts_enabled']:
                priority_alert = await self._check_priority_signal(symbol, alerts)
                if priority_alert:
                    alerts.append(priority_alert)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

        return alerts

    async def _check_volume_alert(self, symbol: str, kline_data: Dict) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –æ–±—ä–µ–º–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–º—ã
            historical_volumes = await self.db_queries.get_historical_long_volumes(
                symbol,
                self.settings['analysis_hours'],
                offset_minutes=self.settings['offset_minutes'],
                volume_type=self.settings['volume_type']
            )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞
            last_alert_timestamp = self.alert_cooldowns.get(symbol)
            validation_result = self.validators.validate_volume_alert(
                symbol, kline_data, historical_volumes, last_alert_timestamp
            )

            if not validation_result['valid']:
                logger.debug(f"–ê–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É –¥–ª—è {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_result['reason']}")
                return None

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞
            current_timestamp_ms = self._get_current_timestamp_ms()
            current_price = float(kline_data['close'])

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
            candle_data = {
                'open': float(kline_data['open']),
                'high': float(kline_data['high']),
                'low': float(kline_data['low']),
                'close': current_price,
                'volume': float(kline_data['volume']),
                'alert_level': current_price
            }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–±–∞–ª–∞–Ω—Å
            imbalance_data = None
            has_imbalance = False
            if self.settings.get('imbalance_enabled', False):
                imbalance_data = await self._analyze_imbalance(symbol)
                has_imbalance = imbalance_data is not None

            # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å—Ç–∞–∫–∞–Ω–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            order_book_snapshot = None
            if self.settings.get('orderbook_snapshot_on_alert', False):
                order_book_snapshot = await self._get_order_book_snapshot(symbol)

            alert_data = {
                'symbol': symbol,
                'alert_type': AlertType.VOLUME_SPIKE.value,
                'price': current_price,
                'volume_ratio': validation_result['volume_ratio'],
                'current_volume_usdt': validation_result['current_volume_usdt'],
                'average_volume_usdt': validation_result['average_volume_usdt'],
                'timestamp': current_timestamp_ms,
                'close_timestamp': current_timestamp_ms,
                'is_closed': True,
                'is_true_signal': True,
                'has_imbalance': has_imbalance,
                'imbalance_data': imbalance_data,
                'candle_data': candle_data,
                'order_book_snapshot': order_book_snapshot,
                'message': f"–û–±—ä–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω –≤ {validation_result['volume_ratio']}x —Ä–∞–∑ (–∏—Å—Ç–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
            self.alert_cooldowns[symbol] = current_timestamp_ms

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É –¥–ª—è {symbol}: {validation_result['volume_ratio']}x")
            return alert_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ –æ–±—ä–µ–º—É –¥–ª—è {symbol}: {e}")
            return None

    async def _check_consecutive_long_alert(self, symbol: str, kline_data: Dict) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–º LONG —Å–≤–µ—á–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
            recent_candles = await self.db_queries.get_recent_candles(
                symbol, self.settings['consecutive_long_count'] + 5
            )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞
            validation_result = self.validators.validate_consecutive_alert(symbol, recent_candles)

            if not validation_result['valid']:
                logger.debug(f"–ê–ª–µ—Ä—Ç –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_result['reason']}")
                return None

            current_timestamp_ms = self._get_current_timestamp_ms()
            current_price = float(kline_data['close'])

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            candle_data = {
                'open': float(kline_data['open']),
                'high': float(kline_data['high']),
                'low': float(kline_data['low']),
                'close': current_price,
                'volume': float(kline_data['volume'])
            }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–±–∞–ª–∞–Ω—Å
            imbalance_data = await self._analyze_imbalance(symbol)
            has_imbalance = imbalance_data is not None

            alert_data = {
                'symbol': symbol,
                'alert_type': AlertType.CONSECUTIVE_LONG.value,
                'price': current_price,
                'consecutive_count': validation_result['consecutive_count'],
                'timestamp': current_timestamp_ms,
                'close_timestamp': current_timestamp_ms,
                'is_closed': True,
                'has_imbalance': has_imbalance,
                'imbalance_data': imbalance_data,
                'candle_data': candle_data,
                'message': f"{validation_result['consecutive_count']} –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö LONG —Å–≤–µ—á–µ–π (–∑–∞–∫—Ä—ã—Ç—ã—Ö)"
            }

            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {symbol}: {validation_result['consecutive_count']} LONG —Å–≤–µ—á–µ–π")
            return alert_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö LONG —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            return None

    async def _check_priority_signal(self, symbol: str, current_alerts: List[Dict]) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∞–ª–µ—Ä—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
            volume_alert = None
            consecutive_alert = None

            for alert in current_alerts:
                if alert['alert_type'] == AlertType.VOLUME_SPIKE.value:
                    volume_alert = alert
                elif alert['alert_type'] == AlertType.CONSECUTIVE_LONG.value:
                    consecutive_alert = alert

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–π –æ–±—ä–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç
            recent_volume_alert = False
            if consecutive_alert:
                recent_volume_alert = await self._check_recent_volume_alert(
                    symbol, consecutive_alert['consecutive_count']
                )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
            validation_result = self.validators.validate_priority_alert(
                symbol, 
                {'valid': volume_alert is not None} if volume_alert else None,
                {'valid': consecutive_alert is not None, 'consecutive_count': consecutive_alert.get('consecutive_count', 0)} if consecutive_alert else None,
                recent_volume_alert
            )

            if not validation_result['valid']:
                logger.debug(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_result['reason']}")
                return None

            candle_data = consecutive_alert.get('candle_data', {})
            if volume_alert and volume_alert.get('candle_data'):
                candle_data.update(volume_alert['candle_data'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            has_imbalance = False
            imbalance_data = None
            if volume_alert and volume_alert.get('has_imbalance'):
                has_imbalance = True
                imbalance_data = volume_alert.get('imbalance_data')
            elif consecutive_alert and consecutive_alert.get('has_imbalance'):
                has_imbalance = True
                imbalance_data = consecutive_alert.get('imbalance_data')

            current_timestamp_ms = self._get_current_timestamp_ms()

            priority_data = {
                'symbol': symbol,
                'alert_type': AlertType.PRIORITY.value,
                'price': consecutive_alert['price'],
                'consecutive_count': consecutive_alert['consecutive_count'],
                'timestamp': current_timestamp_ms,
                'close_timestamp': current_timestamp_ms,
                'is_closed': True,
                'has_imbalance': has_imbalance,
                'imbalance_data': imbalance_data,
                'candle_data': candle_data,
                'message': f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {consecutive_alert['consecutive_count']} LONG —Å–≤–µ—á–µ–π + –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞{' + –∏–º–±–∞–ª–∞–Ω—Å' if has_imbalance else ''}"
            }

            if volume_alert:
                priority_data.update({
                    'volume_ratio': volume_alert['volume_ratio'],
                    'current_volume_usdt': volume_alert['current_volume_usdt'],
                    'average_volume_usdt': volume_alert['average_volume_usdt']
                })

            logger.info(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è {symbol}")
            return priority_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _check_recent_volume_alert(self, symbol: str, candles_back: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –æ–±—ä–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–∞—Ö"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: {e}")
            return False

    async def _analyze_imbalance(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∏–º–±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            candles = await self.db_queries.get_recent_candles(symbol, 20)

            if len(candles) < 15:
                return None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–º–±–∞–ª–∞–Ω—Å–æ–≤
            return self.imbalance_analyzer.analyze_all_imbalances(candles)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _get_order_book_snapshot(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        try:
            if not self.settings.get('orderbook_enabled', False):
                return None

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ —á–µ—Ä–µ–∑ Bybit API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _send_alert(self, alert_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ {alert_data['alert_type']} –¥–ª—è {alert_data['symbol']}")
            logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–ª–µ—Ä—Ç–∞ (UTC timestamp_ms): {alert_data.get('timestamp')}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ database_queries)
            # alert_id = await self.db_queries.save_alert(alert_data)
            # alert_data['id'] = alert_id

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WebSocket
            if self.connection_manager:
                websocket_data = {
                    'type': 'new_alert',
                    'alert': self._serialize_alert(alert_data),
                    'server_timestamp': self._get_current_timestamp_ms(),
                    'utc_synced': self.time_manager.is_time_synced() if self.time_manager else False
                }
                await self.connection_manager.broadcast_json(websocket_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if self.telegram_bot:
                if alert_data['alert_type'] == AlertType.VOLUME_SPIKE.value:
                    await self.telegram_bot.send_volume_alert(alert_data)
                elif alert_data['alert_type'] == AlertType.CONSECUTIVE_LONG.value:
                    await self.telegram_bot.send_consecutive_alert(alert_data)
                elif alert_data['alert_type'] == AlertType.PRIORITY.value:
                    await self.telegram_bot.send_priority_alert(alert_data)

            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_data['symbol']} - {alert_data['alert_type']}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

    def _serialize_alert(self, alert_data: Dict) -> Dict:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞ –¥–ª—è JSON"""
        return alert_data.copy()

    def update_settings(self, new_settings: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings.update(new_settings)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.validators.update_settings(new_settings)
        self.imbalance_analyzer.update_settings(new_settings)
        
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AlertManager –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def get_settings(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self.settings.copy()

    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
            current_timestamp_ms = self._get_current_timestamp_ms()
            cooldown_cutoff_ms = current_timestamp_ms - (60 * 60 * 1000)  # 1 —á–∞—Å –≤ –º—Å

            for symbol in list(self.alert_cooldowns.keys()):
                if self.alert_cooldowns[symbol] < cooldown_cutoff_ms:
                    del self.alert_cooldowns[symbol]

            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")